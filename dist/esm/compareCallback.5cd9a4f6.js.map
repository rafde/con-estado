{"mappings":";;;AAQe,kDAGd,OAA8B;IAE9B,IAAK,OAAO,YAAY,YACvB,OAAO,SAAS,IAAK,aAAsB,EAAE,SAAkB;QAC9D,OAAO,CAAA,GAAA,sBAAc,EAAG,eAAe;IACxC;IAED,OAAO,SAAS,IACf,aAAsB,EACtB,SAAkB,EAClB,GAAgG,EAChG,IAAkH;QAElH,OAAO,QAAS,QACf,eACA,WACA;YACC,KAAK,CAAA,GAAA,sBAAc;iBACnB;kBACA;QACD;IAEF;AACD","sources":["src/_internal/compareCallback.ts"],"sourcesContent":["import { strictDeepEqual, } from 'fast-equals';\nimport type { DS, } from '../types/DS';\nimport type { EstadoHistory, } from '../types/EstadoHistory';\nimport type { NestedKeyArray, } from '../types/NestedKeyArray';\nimport type { NestedRecordKeys, } from '../types/NestedRecordKeys';\nimport type { OptionCompare, } from '../types/OptionCompare';\nimport type { StringPathToArray, } from '../types/StringPathToArray';\n\nexport default function compareCallback<\n\tState extends DS,\n>(\n\tcompare?: OptionCompare<State>,\n) {\n\tif ( typeof compare !== 'function' ) {\n\t\treturn function cmp( previousValue: unknown, nextValue: unknown, ) {\n\t\t\treturn strictDeepEqual( previousValue, nextValue, );\n\t\t};\n\t}\n\treturn function cmp(\n\t\tpreviousValue: unknown,\n\t\tnextValue: unknown,\n\t\tkey: NestedRecordKeys<State> | NestedRecordKeys<Pick<EstadoHistory<State>, 'state' | 'initial'>>,\n\t\tkeys: NestedKeyArray<State> | StringPathToArray<NestedRecordKeys<Pick<EstadoHistory<State>, 'state' | 'initial'>>>,\n\t) {\n\t\treturn Boolean( compare(\n\t\t\tpreviousValue,\n\t\t\tnextValue,\n\t\t\t{\n\t\t\t\tcmp: strictDeepEqual,\n\t\t\t\tkey,\n\t\t\t\tkeys,\n\t\t\t},\n\t\t), );\n\t};\n}\n\nexport type CompareCallbackReturn<\n\tState extends DS = DS,\n> = ReturnType<typeof compareCallback<State>>;\n"],"names":[],"version":3,"file":"compareCallback.5cd9a4f6.js.map"}