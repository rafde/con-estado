{"mappings":";;;;;;;;;AAKe,kDAKd,KAA+B,EAC/B,SAAoB,EACpB,QAAmB;IAEnB,IAAK,SAAS,MACb,OAAO;QAAC;QAAW;KAAW;IAE/B,MAAM,YAAY,OAAO,aAAa,aAAa,WAAW,CAAE,MAA2B;IAC3F,IAAI;IACJ,IAAI,QAAQ;IACZ,KAAM,MAAM,OAAO,UAAY;QAC9B,MAAM,QAAQ,CAAA,GAAA,iCAAY,EAAG;QAC7B,MAAM,UAAU,MAAM,OAAO,CAAE;QAC/B,IAAK,SAAS,SACb;QAED,MAAM,KAAK,UAAW;QACtB,SAAS;QACT,QAAQ,MAAM,CAAE,GAAI;IACrB;IAEA,OAAO;QACN;QACA;KACA;AACF","sources":["src/_internal/getDeepValueParentByArray.ts"],"sourcesContent":["import type { GetArrayPathValue, } from '../types/GetArrayPathValue';\nimport type { NestedRecordKeys, } from '../types/NestedRecordKeys';\nimport type { StringPathToArray, } from '../types/StringPathToArray';\nimport isPlainObject from './isPlainObject';\n\nexport default function getDeepValueParentByArray<\n\tState extends object,\n\tArrayPath extends StringPathToArray<NestedRecordKeys<State>> | Array<string | number>,\n\tCleanKey extends ( ( key: string | number ) => string | number ) = ( key: string | number ) => string | number,\n>(\n\tstate: State | null | undefined,\n\tarrayPath: ArrayPath,\n\tcleanKey?: CleanKey,\n) {\n\tif ( state == null ) {\n\t\treturn [undefined, undefined,];\n\t}\n\tconst _cleanKey = typeof cleanKey === 'function' ? cleanKey : ( key: string | number, ) => key;\n\tlet parent;\n\tlet value = state;\n\tfor ( const key of arrayPath ) {\n\t\tconst isObj = isPlainObject( value, );\n\t\tconst isArray = Array.isArray( value, );\n\t\tif ( isObj && isArray ) {\n\t\t\tbreak;\n\t\t}\n\t\tconst ck = _cleanKey( key, ) as keyof typeof parent;\n\t\tparent = value;\n\t\tvalue = parent[ ck ];\n\t}\n\n\treturn [\n\t\tvalue as GetArrayPathValue<State, ArrayPath>,\n\t\tparent,\n\t];\n}\n"],"names":[],"version":3,"file":"getDeepValueParentByArray.de9c2d96.js.map"}