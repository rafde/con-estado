{"mappings":";;;;;;;;;AAIA,SAAS,iCAAgB,CAAI,EAAE,CAAI,EAAE,OAAW,EAAE,GAAoB,EAAE,OAA8B;IACrG,IAAK,CAAC,QAAS,GAAG,GAAG,KAAe;QAAC;KAAe,GAAM;QACzD,QAAQ,GAAG,CAAE,SAAS,KAAK;QAC3B,OAAO;IACR;IACA,OAAO;AACR;AAEe,kDAAqC,CAAI,EAAE,CAAI,EAAE,OAA8B;IAC7F,IAAI,UAAoD,CAAC;IACzD,IAAI,aAAa;IACjB,IAAK,MAAM,OAAO,CAAE,MAAQ,MAAM,OAAO,CAAE,IAAO;QACjD,MAAM,MAAM,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,IAAI;QACtC,UAAU,IAAI,MAAO,IAAI,MAAM;QAE/B,IAAM,IAAI,MAAM,GAAG,MAAM,IAAI,MAAM,EAAE,MAAQ;YAC5C,OAAO,CAAE,IAAK,GAAG;YACjB,MAAM,cAAc,iCACnB,QAAQ,GAAG,CAAE,GAAG,MAChB,QAAQ,GAAG,CAAE,GAAG,MAChB,SACA,KACA;YAED,IAAK,aACJ,aAAa;QAEf;IACD,OACK,IAAK,CAAA,GAAA,iCAAY,EAAG,MAAQ,CAAA,GAAA,iCAAY,EAAG,IAC/C,IAAM,MAAM,OAAO,EAAI;QACtB,MAAM,cAAc,iCACnB,QAAQ,GAAG,CAAE,GAAG,MAChB,QAAQ,GAAG,CAAE,GAAG,MAChB,SACA,KACA;QAED,IAAK,aACJ,aAAa;IAEf;IAGD,IAAK,CAAC,YACL,OAAO;QAAE,SAAS;IAAW;IAG9B,OAAO;iBAAE;IAAS;AACnB","sources":["src/_internal/findChanges.ts"],"sourcesContent":["import type { DS, } from '../types/DS';\nimport type { CompareCallbackReturn, } from './compareCallback';\nimport isPlainObject from './isPlainObject';\n\nfunction setChanges<T,>( a: T, b: T, changes: DS, key: string | number, compare: CompareCallbackReturn, ): boolean {\n\tif ( !compare( a, b, key as string, [key as string,], ) ) {\n\t\tReflect.set( changes, key, b, );\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport default function findChanges<T extends DS,>( a: T, b: T, compare: CompareCallbackReturn, ) {\n\tlet changes: Record<string, unknown> | Array<unknown> = {};\n\tlet hasChanges = false;\n\tif ( Array.isArray( a, ) && Array.isArray( b, ) ) {\n\t\tconst arr = a.length > b.length ? a : b;\n\t\tchanges = new Array( arr.length, );\n\n\t\tfor ( let key = 0; key < arr.length; key++ ) {\n\t\t\tchanges[ key ] = undefined;\n\t\t\tconst _hasChanges = setChanges(\n\t\t\t\tReflect.get( a, key, ),\n\t\t\t\tReflect.get( b, key, ),\n\t\t\t\tchanges,\n\t\t\t\tkey,\n\t\t\t\tcompare,\n\t\t\t);\n\t\t\tif ( _hasChanges ) {\n\t\t\t\thasChanges = true;\n\t\t\t}\n\t\t}\n\t}\n\telse if ( isPlainObject( a, ) && isPlainObject( b, ) ) {\n\t\tfor ( const key in a ) {\n\t\t\tconst _hasChanges = setChanges(\n\t\t\t\tReflect.get( a, key, ),\n\t\t\t\tReflect.get( b, key, ),\n\t\t\t\tchanges,\n\t\t\t\tkey,\n\t\t\t\tcompare,\n\t\t\t);\n\t\t\tif ( _hasChanges ) {\n\t\t\t\thasChanges = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( !hasChanges ) {\n\t\treturn { changes: undefined, };\n\t}\n\n\treturn { changes, };\n}\n"],"names":[],"version":3,"file":"findChanges.511fd29d.js.map"}